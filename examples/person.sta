extern {
    let printf: (format: *i8, ...args: unsafe.any[]) -> i32 // external function from C
}

type Person {
    firstName: String
    lastName: String
    birthYear: i32

    static {
        // `mut` keyword makes a static field mutable outside the type definition
        mut currentYear = 0

        // Create a static method to construct the type so that the type can be
        // consturcted in other files by calling this method
        pub new = (firstName: String, lastName: String, birthYear: i32) -> Person {
            return Person {
                firstName,
                lastName,
                birthYear
            }
        }

        pub fullName = (self) -> {
            printf("%s %s", self.firstName, self.lastName);
        }

        pub age = (self) -> {
            return Person.currentYear - self.birthYear
        }
    }
}

// Modify mutable static field
Person.currentYear = 2023

type Student {
    // A type extends another type by include it as a field with `extends` keyword
    extends person: Person
    studentId: string

    static {
        pub new = (
            firstName: String,
            lastName: String,
            birthYear: i32,
            studentId: string
        ) -> {
            return Student {
                person: Person.new(firstName, lastName, birthYear),
                studentId
            }
        }

        pub studentId = (self) -> {
            return self.studentId
        }
    }
}

// Use of custom type

let student = Student.new("John", "Smith", 1991, "123456")
student.fullName() // Base type methods can be called directly
// printf("firstName: %s", student.firstName) // Error: Cannot access private fields
printf("age: %d", student.age())
printf("studentId: %d", student.studentId())

